
for(Number i = 0; i < 10; i++) { } 

((a >= b) and (c < d)) or (b == c)


-- Parser comments --
Parser(self, Lexer):
    while(Lexer.hasNextToken()):
        # trata Token

Int a = 2;

[
    ("Int", TYPE),
    ("a", IDENTIFIER),
    ("=", EQUAL),
    ("2", NUMBER)
]

int a = 10;

Symbol(Token tk, Type )

Token("a", IDENTIFIER, ...)
type 


// Tipos de declaração

// Matheus
// Markel
// Danilo
// Kaike
// C
int a = 10;


// tipos de função
// C
int f(int a) {
  return a + 1
}

// Python
def f(a):
  a + 1

// Markel
// JS
(int a) => {}

// Haskell
f a = a + 1 :: Int -> Int



// TS
// a:Int = 10;

// Haskell
// nome :: Tipo

// JS
// let a = 10;

// Python
// nome = 10


Token[] Lexer(String codigo_fonte)

int 1abc;



"( int a;" -> [(, int, a]

plus(type, valor, valor)

int a = 10;

parse(TokenType.IDENTIFIER, "a", )


// [a-zA-Z][a-zA-Z0-9]
reconhece_nome_variavel(String codigo) {
    // [a-zA-Z]
    reconheceLetra(codigo[0]);

    // [a-zA-Z0-9]*
    reconheceDigitos(codigo[1:]);
}

lexer(){
  int minhaVariavel;


  Token("minhaVariavel", TokenType.IDENTIFIER)


  Token("(", TokenType.LEFT_PAREN)
}

parse(TokenType.IF, "if");

plus(int, 10, 20);
