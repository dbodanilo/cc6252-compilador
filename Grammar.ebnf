
(* until end of line *)
comment = "--" , text ;

line = assigmentLine  
     | declaration
     | conditional 
     | loopFor 
     | loopWhile
     | returnLine 
     
     | emptyLine ;

assignmentLine = assignment , ";" ;
(* a = b or c and d *)

declaration = type , 
                   ( assignmentLine 
                   | function 
                   | identifier , ";" ) ;
(* Bool b; *) 
(* Number add1(Number n) { return n + 1; } *)  
(* Number twoThirds = 1 * 2 / 3; *) 

conditional = "if" , "(" , assignment , ")" , block [ , "else" , block ]  ;
(* if (x) { } *) (* if (x) { } else { } *)

loopFor = "for" , "(" ,  ( declaration | assignmentLine ) , assignment , ";" , assigment ")" , block ; 
(* for (Number i = 0; i < 10; i = i + 1) { } *)

loopWhile = "while" , "(" , assignment , ")" , block;
(* while(x) {} *)

returnLine = "return" , assignment ;

emptyLine = ";" ;


assignment = orExpr  [ , "=" , assignment ] ;
(* a = b = c and d *)

function = identifier , "(" [ , param { , "," , param } ] , ")" , block;
(* boolFromNumber(Number n) { return n > 0 and n < 11; } *)

param = type , identifier [ , "=" , value ] ;
(* Letter str = "a" *)

block = "{" , { line } , "}";


orExpr = andExpr [ , "or" , andExpr ] ;

andExpr = compExpr [ , "and" , compExpr ] ;

compExpr = expr [ , ( "<" | ">" | "<=" | ">=" | "==" ) , expr ] ;

expr = term [ , ( "+" | "-" ) , term ] ;

term = negation [ , ( "*" | "/" ) , negation ] ;

negation = ( "not" | "-" ) negation 
         | function_call ;

function = factor  

factor = "(" , assignment , ")"
       | identifier 
       | number
       | string
       | "false"
       | "null"
       | "true"


(** terminals **)

identifier = letter_lower { , ( letter | digit | "_" ) };
(* [a-z][a-zA-Z0-9_]* *)

type = letter_upper { , (letter | digit | "_" ) };
(* [A-Z][a-zA-Z0-9_]* *)

(* +10 invalid *)
number = [ "-" ] , digit { , digit } [ , "." , digit { , digit } ] ;
(* -?[0-9]+(\.[0-9]+)? *)

string = '"' ,{ letter | digit | symbol | special | whitespace } ,'"' ";";
(* ".*" *)


letter = letter_lower | letter_upper;

letter_upper = "A" | "B" | "C" | "D" | "E" | "F" | "G"
             | "H" | "I" | "J" | "K" | "L" | "M" | "N"
             | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
             | "V" | "W" | "X" | "Y" | "Z" ;

letter_lower = "a" | "b" | "c" | "d" | "e" | "f" | "g"
             | "h" | "i" | "j" | "k" | "l" | "m" | "n"
             | "o" | "p" | "q" | "r" | "s" | "t" | "u"
             | "v" | "w" | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" 
      | "6" | "7" | "8" | "9" ;

symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"
       | "'" | '"' | "=" | "|" | "." | "," | ";" ;       

special = "@" | "#" | "$" | "%";


(** unused **)

loopFor = "for" , "(" [ , type ]  , value , "in" , assignment , ")" , block ;
(* for(frutas in fruteira){} *)

expr = assignment 
     | orExpr ;

whitespace = " ";

value = number 
      | string 
      | identifier 
      | "false" 
      | "null" 
      | "true" ;

